#!/usr/bin/env python3

import click
import os
import pathlib
import subprocess
import sys
import tempfile


def _repo_root() -> pathlib.Path:
    """Returns the absolute path of the repos root directory."""
    git_toplevel = subprocess.run("git rev-parse --show-toplevel", shell=True, text=True,
                                  stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if git_toplevel.returncode != 0:
        sys.exit(git_toplevel.stderr)

    return pathlib.Path(git_toplevel.stdout.strip())


def _create_project(project: str, workspace: str) -> str:
    """Create Xilinx project directory."""
    # check if project file exists
    if not pathlib.Path(project).is_file():
        sys.exit(f"Project TCL script does not exists: {project}")

    # create project workspace directory
    try:
        pathlib.Path(workspace).mkdir(parents=False, exist_ok=False)
    except FileExistsError:
        sys.exit(f"Project workspace already exists: {workspace}")

    # ensure path to project tcl script is relative to repo root
    project_script = pathlib.Path(project).relative_to(_repo_root())

    # create vivado command to run in the docker command
    return f"cd /work/ && vivado -nolog -nojournal -mode batch -notrace -source {project_script}"


def _build_bitstream(project: str, workspace: str) -> None:
    """Build a bitstream file within a already created project directory."""
    # extract name of project from project script
    name = pathlib.Path(project).stem

    script = ""
    script = script + "# Open Vivado project\n"
    script = script + f"open_project {name}.xpr\n"
    script = script + "update_compile_order -fileset sources_1\n"
    script = script + ""
    script = script + "# Generate bitstream file\n"
    script = script + "launch_runs impl_1 -to_step write_bitstream\n"
    script = script + "wait_on_run impl_1\n"

    # create tmp file and write into the the tcl script
    _, build_script = tempfile.mkstemp(suffix='.tcl')

    with open(build_script, 'w') as template:
        template.write(script)

    # create vivado command to run in the docker command
    return f"cd /work/{workspace} && vivado -nolog -nojournal -mode batch -notrace -source {build_script}"


def _write_template() -> None:
    """Generate a template create TCL script as starting point for a project."""
    name = click.prompt('Name of project', default='template')
    part = click.prompt('FPGA part number', default='xc7z010clg225-1')

    script = f"set name {name}\n"
    script = script + f"set part {part}"
    script = script + """
set workspace $::env(WORKSPACE)

create_project $name $workspace -part $part -force

# Define procedure that creates IP-XACT package
proc package_ip { package_name display_name pkg_cb rtl_list } {
    global workspace
    set xact $workspace/ipx/$package_name

    # Copy the RTL files into the IP-XACT hdl directory
    file mkdir $xact/hdl
    foreach rtl_file $rtl_list {
        file copy -force $rtl_file $xact/hdl/
    }

    # Wrap IP into an IP-XACT object
    ipx::infer_core -vendor bitter -library ip -taxonomy Bitter $xact
    ipx::edit_ip_in_project -name edit_ip_project \\
                            -directory $workspace/vivado.tmp/$package_name.ip_pkg $xact/component.xml
    ipx::current_core $xact/component.xml

    set_property vendor bitter [ipx::current_core]
    set_property company_url https://github.com/bmartini/bitter-build-utility [ipx::current_core]
    set_property core_revision 1 [ipx::current_core]
    set_property display_name $display_name [ipx::current_core]

    $pkg_cb

    # Write & save package IP
    ipx::update_source_project_archive -component [ipx::current_core]
    ipx::create_xgui_files [ipx::current_core]
    ipx::update_checksums [ipx::current_core]
    ipx::save_core [ipx::current_core]
    ipx::move_temp_component_back -component [ipx::current_core]

    # Close tmp package IP project
    close_project -delete
}

# Construct list of RTL files to be copied into IP
set rtl_list []
foreach rtl_file [glob -type f -directory hdl/ *] {
    # add all files in 'hdl' dir to IP
    lappend rtl_list $rtl_file
}

package_ip ${name} "Project Core IP" [proc "" { } {
    # Packaged IP settings and directives
}] $rtl_list


# Update IPs in project
set_property ip_repo_paths ${workspace}/ipx [current_project]
update_ip_catalog

# Read projects constraint file
#file copy -force ${name}.xdc ${workspace}/
#read_xdc ${workspace}/${name}.xdc
#set_property target_constrs_file ${workspace}/${name}.xdc [current_fileset -constrset]

# Create Block Design
#source ${name}_bd.tcl
#make_wrapper -files [get_files ${workspace}/${name}.srcs/sources_1/bd/${name}/${name}.bd] -top
#add_files -norecurse ${workspace}/${name}.gen/sources_1/bd/${name}/hdl/${name}_wrapper.v
#update_compile_order
#save_bd_design
"""

    with open(f'{name}.tcl', 'w') as template:
        template.write(script)


def _docker_run(project: str, workspace: str, cmd: str) -> None:
    """Run command within a docker container."""
    command = f"source /opt/Xilinx/settings64.sh && {cmd}"

    user_id = os.environ.get('UID', 1001)
    display = os.environ.get('DISPLAY', ':0')
    work = os.environ.get('HOST_WORK', _repo_root())

    subprocess.run(f"\
        docker run \
            --interactive \
            --tty \
            --rm \
            --pid=host \
            --env=HOST_USER_ID={user_id} \
            --env=WORKSPACE={workspace} \
            --env=DISPLAY={display} \
            --env=HOST_WORK={work} \
            --volume /tmp:/tmp \
            --volume /var/run/docker.sock:/var/run/docker.sock:rw \
            --volume {work}:/work:rw \
            --mount source=xilinx-2022.2,target=/opt/Xilinx \
            --workdir '/work' \
            fpga-bitter \
            /bin/bash -c '{command}'", shell=True)


@click.command()
@click.option('-p', '--project', default="project.tcl",
              type=click.Path(file_okay=True, dir_okay=False, readable=True, resolve_path=True),
              help="Location and name of project TCL script.")
@click.option('-w', '--workspace', default="project", help="Workspace name of project.")
@click.option('-c', '--create', is_flag=True, help="Create the project only, do not build bitstream.")
@click.option('-i', '--interactive', is_flag=True, help="Override all other options and enter docker env.")
@click.option('-t', '--template', is_flag=True, help="Write out a template TCL create script.")
def bitter(project, workspace, create, interactive, template):
    """The Bitter Build Utility

    Running the program without any options will build a bitstream using the
    default TCL create.tcl script. Using the interactive flag will override all
    other options and enter the docker env.
    """

    if interactive:
        _docker_run(project, workspace, "bash")
        sys.exit()

    if template:
        _write_template()
        sys.exit()

    # run create step of project build
    _docker_run(project, workspace, _create_project(project, workspace))

    if create:
        sys.exit()

    # after creating the project, build the bitstream
    _docker_run(project, workspace, _build_bitstream(project, workspace))


if __name__ == '__main__':
    bitter()
